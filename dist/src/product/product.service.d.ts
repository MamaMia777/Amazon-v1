import { Prisma } from '@prisma/client';
import { PaginationService } from './../pagination/pagination.service';
import { GetAllProductsDto } from './dto/get-all.product.dto';
import { ProductDto } from './dto/product.dto';
import { PrismaService } from './../prisma.service';
export declare class ProductService {
    private prisma;
    private paginationService;
    constructor(prisma: PrismaService, paginationService: PaginationService);
    getAll(dto?: GetAllProductsDto): Promise<{
        products: {
            createdAt?: Date;
            updatedAt?: Date;
            name?: string;
            slug?: string;
            description?: string;
            price?: number;
            image?: string;
            orderItems?: import(".prisma/client").OrderItem[];
            reviews?: import(".prisma/client").Review[];
            category?: import(".prisma/client").Category;
            user?: import(".prisma/client").User;
            id?: number;
            categoryId?: number;
            userId?: number;
            _count?: Prisma.ProductCountOutputType;
        }[];
        length: number;
    }>;
    byId(id: number): Promise<{
        createdAt?: Date;
        updatedAt?: Date;
        name?: string;
        slug?: string;
        description?: string;
        price?: number;
        image?: string;
        orderItems?: import(".prisma/client").OrderItem[];
        reviews?: import(".prisma/client").Review[];
        category?: import(".prisma/client").Category;
        user?: import(".prisma/client").User;
        id?: number;
        categoryId?: number;
        userId?: number;
        _count?: Prisma.ProductCountOutputType;
    }>;
    update(id: number, dto: ProductDto): Promise<import(".prisma/client").Product>;
    bySlug(slug: string): Promise<{
        createdAt?: Date;
        updatedAt?: Date;
        name?: string;
        slug?: string;
        description?: string;
        price?: number;
        image?: string;
        orderItems?: import(".prisma/client").OrderItem[];
        reviews?: import(".prisma/client").Review[];
        category?: import(".prisma/client").Category;
        user?: import(".prisma/client").User;
        id?: number;
        categoryId?: number;
        userId?: number;
        _count?: Prisma.ProductCountOutputType;
    }>;
    byCategory(categorySlug: string): Promise<{
        createdAt?: Date;
        updatedAt?: Date;
        name?: string;
        slug?: string;
        description?: string;
        price?: number;
        image?: string;
        orderItems?: import(".prisma/client").OrderItem[];
        reviews?: import(".prisma/client").Review[];
        category?: import(".prisma/client").Category;
        user?: import(".prisma/client").User;
        id?: number;
        categoryId?: number;
        userId?: number;
        _count?: Prisma.ProductCountOutputType;
    }[]>;
    getSimilar(id: number): Promise<{
        createdAt?: Date;
        updatedAt?: Date;
        name?: string;
        slug?: string;
        description?: string;
        price?: number;
        image?: string;
        orderItems?: import(".prisma/client").OrderItem[];
        reviews?: import(".prisma/client").Review[];
        category?: import(".prisma/client").Category;
        user?: import(".prisma/client").User;
        id?: number;
        categoryId?: number;
        userId?: number;
        _count?: Prisma.ProductCountOutputType;
    }[]>;
    create(): Promise<number>;
    delete(productId: number): Promise<void>;
}
